import React, { createContext, useContext, useState, ReactNode } from 'react';
import type { Post, Category, ForumStats, User } from '../types';

interface ForumContextType {
  posts: Post[];
  setPosts: React.Dispatch<React.SetStateAction<Post[]>>;
  categories: Category[];
  stats: ForumStats;
  user: User | undefined;
  setUser: React.Dispatch<React.SetStateAction<User | undefined>>;
  handleToggleFavorite: (postId: string) => void;
  handleLogout: () => void;
}

const ForumContext = createContext<ForumContextType | undefined>(undefined);

// Mock data
const mockUser: User = {
  id: '1',
  username: 'Admin',
  email: 'admin@forum.com',
  joinDate: new Date('2024-01-01'),
  postsCount: 42,
  reputation: 1000
};

const mockCategories: Category[] = [
  {
    id: '1',
    name: '–û–±—â–∏–µ',
    description: '–û–±—â–∏–µ —Ç–µ–º—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è',
    icon: 'üí¨',
    postsCount: 156,
    color: '#667eea'
  },
  {
    id: '2',
    name: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
    description: '–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ IT',
    icon: 'üíª',
    postsCount: 89,
    color: '#4CAF50'
  },
  {
    id: '3',
    name: '–°–ø–æ—Ä—Ç',
    description: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã',
    icon: '‚öΩ',
    postsCount: 67,
    color: '#FF9800'
  },
  {
    id: '4',
    name: '–ö—É–ª—å—Ç—É—Ä–∞',
    description: '–ö—É–ª—å—Ç—É—Ä–∞ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ',
    icon: 'üé≠',
    postsCount: 45,
    color: '#9C27B0'
  },
  {
    id: '5',
    name: '–ü–æ–ª–∏—Ç–∏–∫–∞',
    description: '–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è',
    icon: 'üèõÔ∏è',
    postsCount: 23,
    color: '#F44336'
  },
  {
    id: '6',
    name: '–ù–∞—É–∫–∞',
    description: '–ù–∞—É—á–Ω—ã–µ —Ç–µ–º—ã',
    icon: 'üî¨',
    postsCount: 34,
    color: '#2196F3'
  }
];

const mockStats: ForumStats = {
  totalUsers: 1250,
  totalPosts: 456,
  totalComments: 2340,
  activeUsers: 89,
  newPostsToday: 12
};

const mockPosts: Post[] = [
  {
    id: '1',
    title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à —Ñ–æ—Ä—É–º!',
    content: '–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Ç–µ–º–∞ –Ω–∞ –Ω–∞—à–µ–º —Ñ–æ—Ä—É–º–µ. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Å—É–∂–¥–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ–º—ã, –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!',
    author: mockUser,
    category: '–û–±—â–∏–µ',
    tags: ['–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', '–Ω–æ–≤–æ—Å—Ç–∏'],
    createdAt: new Date('2024-01-15T10:00:00'),
    updatedAt: new Date('2024-01-15T10:00:00'),
    likes: 25,
    dislikes: 2,
    views: 156,
    commentsCount: 8,
    isFavorite: false
  },
  {
    id: '2',
    title: '–ù–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ 2024 –≥–æ–¥—É',
    content: '–û–±—Å—É–∂–¥–∞–µ–º —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã —ç—Ç–æ–≥–æ –≥–æ–¥–∞. –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, –∫–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è, –º–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω—ã–µ - —á—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
    author: mockUser,
    category: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
    tags: ['—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '2024', 'AI'],
    createdAt: new Date('2024-01-14T15:30:00'),
    updatedAt: new Date('2024-01-14T15:30:00'),
    likes: 18,
    dislikes: 1,
    views: 89,
    commentsCount: 12,
    isFavorite: false
  },
  {
    id: '3',
    title: '–õ—É—á—à–∏–µ —Ñ–∏–ª—å–º—ã 2023 –≥–æ–¥–∞',
    content: '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ —Ñ–∏–ª—å–º–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤ –ø—Ä–æ—à–ª–æ–º –≥–æ–¥—É. –ö–∞–∫–∏–µ —Ñ–∏–ª—å–º—ã –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –Ω–∞ –≤–∞—Å —Å–∞–º–æ–µ —Å–∏–ª—å–Ω–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ?',
    author: mockUser,
    category: '–ö—É–ª—å—Ç—É—Ä–∞',
    tags: ['–∫–∏–Ω–æ', '2023', '–æ–±–∑–æ—Ä'],
    createdAt: new Date('2024-01-13T20:15:00'),
    updatedAt: new Date('2024-01-13T20:15:00'),
    likes: 32,
    dislikes: 3,
    views: 234,
    commentsCount: 19,
    isFavorite: false
  }
];

export const ForumProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–∑ localStorage
  const getInitialPosts = (): Post[] => {
    const savedFavorites = localStorage.getItem('forum-favorites');
    if (savedFavorites) {
      const favoriteIds = JSON.parse(savedFavorites);
      return mockPosts.map(post => ({
        ...post,
        isFavorite: favoriteIds.includes(post.id)
      }));
    }
    return mockPosts;
  };

  const [posts, setPosts] = useState<Post[]>(getInitialPosts);
  const [user, setUser] = useState<User | undefined>(mockUser);

  const handleToggleFavorite = (postId: string) => {
    setPosts(prevPosts => {
      const newPosts = prevPosts.map(post => 
        post.id === postId 
          ? { ...post, isFavorite: !post.isFavorite }
          : post
      );
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –≤ localStorage
      const favoriteIds = newPosts.filter(post => post.isFavorite).map(post => post.id);
      localStorage.setItem('forum-favorites', JSON.stringify(favoriteIds));
      
      return newPosts;
    });
  };

  const handleLogout = () => {
    setUser(undefined);
  };

  const value: ForumContextType = {
    posts,
    setPosts,
    categories: mockCategories,
    stats: mockStats,
    user,
    setUser,
    handleToggleFavorite,
    handleLogout
  };

  return (
    <ForumContext.Provider value={value}>
      {children}
    </ForumContext.Provider>
  );
};

export const useForum = () => {
  const context = useContext(ForumContext);
  if (context === undefined) {
    throw new Error('useForum must be used within a ForumProvider');
  }
  return context;
};
